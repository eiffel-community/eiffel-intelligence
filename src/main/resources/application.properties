spring.application.name: eiffel-intelligence

# Port where Eiffel Intelligence will run
server.port: 8090

# Logging levels can be set with the flag below for the top packages deactivated by
# default because Travis will fail due to log file size. It is possible to only
# activate logging for a certain package under these top packages.
logging.level.root: OFF
logging.level.org.springframework.web: ERROR
logging.level.com.ericsson.ei: ERROR

# Path to file containing aggregation rules
# If the path is a url it needs to include the http(s) protocol.
rules.path: /rules/ArtifactRules-Eiffel-Agen-Version.json
# The marker to be replaced with an Eiffel event ID extracted from IdentifyRules
rules.replacement.marker: %IdentifyRulesEventId%

# This property needs to be enabled in order to test new aggregation rules on an
# existing or artificially created set of events.
# WARNING! Do not enable this in a production environment!
test.aggregation.enabled: false

# Details for connection to RabbitMQ
rabbitmq.host: localhost
rabbitmq.port: 5672
rabbitmq.user: myuser
rabbitmq.password: myuser
# Check configuration documentation for using jasypt encrypted passswords
# Valid TLS versions: 'TLSv1.2', 'TLSv1.1', 'TLSv1', 'TLS', 'SSLv3', 'SSLv2', 'SSL'
rabbitmq.tls.version:
rabbitmq.exchange.name: ei-exchange
rabbitmq.domain.id: ei-domain
rabbitmq.component.name: eiffel-intelligence
rabbitmq.consumer.name: messageConsumer
rabbitmq.queue.durable: true
rabbitmq.binding.key: #
rabbitmq.waitlist.queue.suffix: waitList

# we reuse the same version as we use in our unit tests
spring.mongodb.embedded.version: 3.4.1
# we remove the embedded mongodb in tests since in most of them we set up our own before Spring starts
# and activate it manually in tests where we need the Spring's own embedded mongo DB
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration


# Details for connection to mongoDB
# Uri examples no encryption:
# Example 1: mongodb://localhost:27017                                    - Single MongoDB instance, no authentication
# Example 2: mongodb://username:mypasswd@localhost:27017                  - Single MongoDD instance with authentication
# Example 3: mongodb://username:mypasswd@hostname1:27017,hostname2:27017  - Multiple MongoDB instances with authentication

# To encrypt a password used in a uri the password must be given in it´s own property
# Check configuration documentation for using jasypt encrypted passswords
# Uri examples with encryption:
# Example 1: 
# spring.data.mongodb.password: ENC(en2h9ZQlZEuWyyfiTVrOPcQbRTwcXxOJ)                               - The encrypte password property
# spring.data.mongodb.uri: mongodb://username:${spring.data.mongodb.password}@localhost:27017       - Single MongoDD instance with tag for password property

spring.data.mongodb.uri: mongodb://localhost:27017
spring.data.mongodb.database: eiffel_intelligence

# session expiration
# Configure the session storage expiration time for logged in users of Eiffel Intelligence front-end
server.session.timeout: 1200
# Configure the database collection name to store sessions
sessions.collection.name: sessions

# Name of the database collection where aggregated objects are stored
aggregations.collection.name: aggregations
# Configure time-to-live value (seconds) for aggregated objects. This needs to be set if
# using the example rule set 'AllEventsRules' to avoid the storage growing too large.
# Recommended setting is 10 minutes.
aggregations.collection.ttl:
# The name of the database collection where to store the mapping between
# aggregated objects and id of the Eiffel events that contributed to those
event.object.map.collection.name: event_object_map
# Name of the database collection where subscriptions are stored
subscriptions.collection.name: subscriptions
# Name of the database collection where we store pair of 'subscription:aggregated object'
# where notification has been sent and should not be repeated
subscriptions.repeat.handler.collection.name: subscriptions_repeat_handler
# The waitlist contains Eiffel events which are waiting to be aggregated
# Configure the database collection name for the waitlist
waitlist.collection.name: wait_list
# Set the time-to-live value for Eiffel events in the waitlist database (seconds)
waitlist.collection.ttl: 600
# Resend information for unprocessed events in waitlist, time in milliseconds
waitlist.resend.initial.delay: 2000
waitlist.resend.fixed.rate: 15000
# Name of the collection where failed notifications are stored
failed.notifications.collection.name: failed_notifications
# Configure time-to-live for failed notifications in database (seconds)
failed.notifications.collection.ttl: 600
# Number of retries if a notification fail
notification.retry: 3

# Configure email sender and default subject for email notifications.
email.sender: noreply@ericsson.com
email.subject: Email Subscription Notification

# Configure the email server to route email notifications through.
spring.mail.host:
spring.mail.port:
spring.mail.username:
spring.mail.password:
spring.mail.properties.mail.smtp.auth: false
spring.mail.properties.mail.smtp.starttls.enable: false

# Url for downstream and upstream search in event repository. Configuring this
# enables Eiffel Intelligence to aggregate historical Eiffel events.
#er.url: http://localhost:8080/search/
er.url:

# Settings for ldap server if ldap authentication is needed.
# For security reasons and to avoid authorization problems this
# password should be encoded in base64. It will be decoded in EndpointSecurity.java.
#
# Password field can also be Jasypt encoded, check configuration documentation for info.
ldap.enabled: false
ldap.server.list: [{\
        "url": "",\
        "base.dn": "",\
        "username": "",\
        "password": "",\
        "user.filter": ""\
    }]

### DEVELOPER SETTINGS

# We reuse the same version as we use in our unit tests
spring.mongodb.embedded.version: 3.4.1
# We remove the embedded mongodb in tests since in most of them we set up our own before Spring
# starts and activate it manually in tests where we need the Spring's own embedded mongo DB
spring.autoconfigure.exclude: org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration

# Threading settings
threads.core.pool.size: 100
threads.queue.capacity: 5000
threads.max.pool.size: 150

# WaitList-worker and Scheduling task executor thread settings
scheduled.threadpool.size: 100
