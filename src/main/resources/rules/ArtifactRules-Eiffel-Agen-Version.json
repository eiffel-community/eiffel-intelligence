[
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelArtifactCreatedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "YES",
    "IdentifyRules" : "[meta.id]",
    "MatchIdRules": {"_id": "%IdentifyRules_objid%"},
    "ExtractionRules" : "{ id : meta.id, type : meta.type, time : meta.time, name : data.name, identity : data.identity, fileInformation : data.fileInformation, buildCommand : data.buildCommand, artifactCustomData : data.customData }",
    "DownstreamIdentifyRules" : "links | [?type=='COMPOSITION'].target",
    "DownstreamMergeRules": "{\"externalComposition\":{\"eventId\":%IdentifyRules%}}",
    "DownstreamExtractionRules" : "{artifacts: [{id : meta.id}]}",
    "HistoryIdentifyRules":"links | [?type=='COMPOSITION'].target",
    "HistoryExtractionRules":"{id : meta.id, identity : data.identity, fileInformation : data.fileInformation}",
    "HistoryPathRules": "{artifacts: [{id: meta.id}]}",
    "ProcessRules" : null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelArtifactPublishedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "links | [?type=='ARTIFACT'].target",
    "MatchIdRules": {"_id": "%IdentifyRules_objid%"},
    "ExtractionRules" : "{ eventId : meta.id, time : meta.time, locations : data.locations }",
    "MergeResolverRules": "[ {NONEPATH:NONE}, {publications: [{ eventId: meta.id }]} ]",
    "ProcessRules":null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelConfidenceLevelModifiedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "links | [?type=='SUBJECT'].target",
    "MatchIdRules": {"_id": "%IdentifyRules_objid%"},
    "ExtractionRules" : "{ eventId:meta.id, time:meta.time, name:data.name, value:data.value }",
    "MergeResolverRules": "[ {NONEPATH:NONE}, {confidenceLevels: [{ eventId: meta.id }]} ]",
    "ArrayMergeOptions": "",
    "ProcessRules":null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelTestCaseTriggeredEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "links | [?type=='IUT'].target",
    "MatchIdRules": {"_id": "%IdentifyRules_objid%"},
    "ExtractionRules" : "{ testCaseTriggeredEventId:meta.id, testCaseTriggeredTime:meta.time, outcome:data.testCase }",
    "MergeResolverRules": "[ {NONEPATH:NONE}, {testCaseExecutions: [{ testCaseTriggeredEventId: meta.id }]} ]",
    "ArrayOptions": "",
    "ProcessRules":null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelTestCaseStartedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "links | [?type=='TEST_CASE_EXECUTION'].target",
    "MatchIdRules": { "$and": [{"testCaseExecutions.testCaseTriggeredEventId": "%IdentifyRules%"}]},
    "ExtractionRules" : "{testCaseStartedEventId:meta.id, testCaseStartedTime:meta.time, outcome:data.testCase }",
    "MergeResolverRules": "[{NONEPATH:NONE}, {testCaseExecutions: [{ testCaseTriggeredEventId: links | [?type=='TEST_CASE_EXECUTION'] | [0].target }] }]",
    "ArrayOptions": "",
    "ProcessRules":null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelTestCaseFinishedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "links | [?type=='TEST_CASE_EXECUTION'].target",
    "MatchIdRules": {"testCaseExecutions": {"$elemMatch":{ "$and": [{"testCaseTriggeredEventId": "%IdentifyRules%"},{"testCaseStartedEventId":{"$exists":true}}]}}},
    "ExtractionRules" : "{ testCaseFinishedEventId:meta.id, testCaseFinishedTime:meta.time, outcome:data.outcome}",
    "MergeResolverRules" : "{\"testCaseTriggeredEventId\":%IdentifyRules%}",
    "ArrayMergeOptions": "",
    "ProcessRules": "{testCaseDuration : diff(testCaseExecutions | [?testCaseTriggeredEventId=='%IdentifyRules%'].testCaseFinishedTime | [0], testCaseExecutions | [?testCaseTriggeredEventId=='%IdentifyRules%'].testCaseStartedTime | [0])}"
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelCompositionDefinedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "",
    "MatchIdRules": { },
    "ExtractionRules" : "",
    "ArrayMergeOptions": "",
    "DownstreamIdentifyRules":"links | [?type=='ELEMENT'].target",
    "DownstreamExtractionRules": "{externalComposition: {eventId: meta.id, time:meta.time, name:data.name}}",
    "DownstreamMergeRules": "{\"eventId\":%IdentifyRules%}",
    "HistoryExtractionRules": "{eventId: meta.id, time: meta.time,  name: data.name}",
    "HistoryPathRules": "{internalComposition:{compositions: [{eventId: meta.id}]}}",
    "ProcessRules":null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelSourceChangeCreatedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "",
    "MatchIdRules": {},
    "ExtractionRules" : "",
    "ArrayMergeOptions": "",
    "HistoryIdentifyRules": "",
    "HistoryExtractionRules": "{SCCEventId: meta.id, gitIdentifier:data.gitIdentifier, author:data.author, issues:data.issues}",
    "HistoryPathRules": "{sourceCreations: [{SCCEventId: meta.id}]}",
    "ProcessRules":null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelSourceChangeSubmittedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "",
    "MatchIdRules": {},
    "ExtractionRules" : "",
    "ArrayMergeOptions": "",
    "HistoryIdentifyRules":"links | [?type=='CHANGE'].target",
    "HistoryExtractionRules": "{SCSEventId: meta.id, gitIdentifier:data.gitIdentifier, submitter:data.submitter}",
    "HistoryPathRules": "{sourceChanges: [{SCSEventId: meta.id}]}",
    "ProcessRules":null
  },
  {
    "TemplateName":"ARTIFACT_1",
    "Type":"EiffelFlowContextDefinedEvent",
    "TypeRule": "meta.type",
    "IdRule": "meta.id",
    "StartEvent": "NO",
    "IdentifyRules" : "",
    "MatchIdRules": {},
    "ExtractionRules" : "",
    "HistoryIdentifyRules": "",
    "HistoryExtractionRules": "{ eventId:meta.id, product:data.product, project:data.project, program:data.program, track:data.track, version:data.version }",
    "HistoryPathRules": "{flowContexts: [{eventId: meta.id}]}",
    "ProcessRules":null
  }
]
